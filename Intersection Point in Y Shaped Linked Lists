Given two singly linked lists, return the point where two linked lists intersect.

Note: If the linked lists do not merge at any point, return -1.

Examples:

Input: Linked list 1: 4->4->4->4->4, Linked list 2: 4->4->4
 
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4->4 whose starting point is 4.

Input: Linked list 1: 4->1->8->4->5, Linked List 2: 5->6->1->8->4->5
 
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8->4->5 whose starting point is 8.
Input: Linked list 1: 1->2->3, Linked list 2: 4->5->6
Output: -1
Explanation: There is no common part, so there is no interaction point.
Try to solve the problem without using any extra space.

Constraints:
2 ≤ size of first linkedist + size of second linkedlist ≤ 2*105
-1000 ≤ data of nodes ≤ 1000


    int fun(Node* &head1, Node* &head2){
        while(head1 && head2){
            if(head1 == head2){
                return head1->data;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        return -1;
    }
    int intersectPoint(Node* head1, Node* head2) {
        // Your Code Here
        int l1 = 0;
        int l2 = 0;
        Node* temp = head1;
        while(temp){
            l1++;
            temp = temp->next;
        }
        temp = head2;
        while(temp){
            l2++;
            temp = temp->next;
        }
        if(l1 > l2){
            int cnt = l1-l2;
            while(cnt--){
                head1 = head1->next;
            }
            return fun(head1,head2);
        }else if(l2 > l1){
            int cnt = l2-l1;
            while(cnt--){
                head2 = head2->next;
            }
            return fun(head1,head2);
        }else{
            return fun(head1,head2);
        }
    }
